<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Snake Game</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
            margin: 0;
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 1px solid #000;
            background-color: #fff;
            margin-bottom: 20px;
        }
        #score {
            font-size: 24px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <div id="score">Score: 0</div>
    
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score');

        const box = 20;
        let snake, direction, food, score, game;

        function resetGame() {
            snake = [{ x: 9 * box, y: 9 * box }];
            direction = '';
            food = spawnFood();
            score = 0;
            scoreDisplay.innerText = `Score: ${score}`;
            clearInterval(game);
            game = setInterval(draw, 100);
        }

        resetGame();
        
        document.addEventListener('keydown', changeDirection);

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw snake
            for (let i = 0; i < snake.length; i++) {
                ctx.fillStyle = (i === 0) ? 'green' : 'lightgreen';
                ctx.fillRect(snake[i].x, snake[i].y, box, box);
                ctx.strokeStyle = 'darkgreen';
                ctx.strokeRect(snake[i].x, snake[i].y, box, box);
            }

            // Draw food
            ctx.fillStyle = 'red';
            ctx.fillRect(food.x, food.y, box, box);

            // Move Snake
            let snakeX = snake[0].x;
            let snakeY = snake[0].y;

            if (direction === 'LEFT') snakeX -= box;
            if (direction === 'UP') snakeY -= box;
            if (direction === 'RIGHT') snakeX += box;
            if (direction === 'DOWN') snakeY += box;

            // Check if snake eats the food
            if (snakeX === food.x && snakeY === food.y) {
                score++;
                scoreDisplay.innerText = `Score: ${score}`;
                food = spawnFood();
            } else {
                snake.pop(); // Remove the last part of the snake
            }

            // Add new head
            let newHead = { x: snakeX, y: snakeY };

            // Game over
            if (collision(newHead)) {
                clearInterval(game);
                alert(`Game Over! Your score is: ${score}. Click OK to try again.`);
                resetGame(); // Reset game after acknowledgment
                return;
            }

            snake.unshift(newHead);
        }

        function spawnFood() {
            let newFood;
            while (true) {
                newFood = {
                    x: Math.floor(Math.random() * (canvas.width / box)) * box,
                    y: Math.floor(Math.random() * (canvas.height / box)) * box
                };
                
                // Ensure food doesn't spawn on the snake
                if (!snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {
                    break;
                }
            }
            return newFood;
        }

        function changeDirection(event) {
            if (event.key === 'ArrowLeft' && direction !== 'RIGHT') {
                direction = 'LEFT';
            } else if (event.key === 'ArrowUp' && direction !== 'DOWN') {
                direction = 'UP';
            } else if (event.key === 'ArrowRight' && direction !== 'LEFT') {
                direction = 'RIGHT';
            } else if (event.key === 'ArrowDown' && direction !== 'UP') {
                direction = 'DOWN';
            }
        }

        function collision(head) {
            return (
                head.x < 0 ||
                head.x >= canvas.width ||
                head.y < 0 ||
                head.y >= canvas.height ||
                snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y)
            );
        }

    </script>
</body>
</html>
